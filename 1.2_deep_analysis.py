# 2.1_unpack_and_organize_fixed.py –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
import os
import json
import zipfile
import sqlite3
import pandas as pd
from pathlib import Path
from tqdm import tqdm
import shutil


class WindowsDataOrganizer:
    def __init__(self, base_path):
        self.base_path = base_path
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—É—Ç–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Windows
        self.processed_path = os.path.join(base_path, "organized_data")
        self.db_path = 'camera_geolocation_expanded.db'

        self.create_folder_structure()

    def create_folder_structure(self):
        """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è Windows"""
        # –ö–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ –ø–∞–ø–æ–∫
        folders = [
            "cs_18_001/july/img",  # construction_sites
            "cs_18_001/july/meta",
            "cs_18_001/august/img",
            "cs_18_001/august/meta",
            "ncb_00_022/july/img",  # non_compliant_buildings
            "ncb_00_022/july/meta",
            "ncb_00_022/august/img",
            "ncb_00_022/august/meta"
        ]

        for folder in folders:
            os.makedirs(os.path.join(self.processed_path, folder), exist_ok=True)

        print("üìÅ –°–æ–∑–¥–∞–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –¥–ª—è Windows")

    def safe_extract_zip(self, zip_file, target_dir):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ZIP —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö –ø—É—Ç–µ–π"""
        try:
            with zipfile.ZipFile(zip_file, 'r') as zip_ref:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                file_list = zip_ref.namelist()
                image_files = [f for f in file_list if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤–µ")

                success_count = 0
                error_count = 0

                for file_path in tqdm(image_files, desc="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ"):
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø—É—Ç–∏)
                        filename = os.path.basename(file_path)

                        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å
                        safe_target_path = os.path.join(target_dir, filename)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—É—Ç–∏
                        if len(safe_target_path) > 240:
                            print(f"   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å: {filename}")
                            continue

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª
                        with zip_ref.open(file_path) as source_file:
                            with open(safe_target_path, 'wb') as target_file:
                                shutil.copyfileobj(source_file, target_file)

                        success_count += 1

                    except Exception as e:
                        error_count += 1
                        if error_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è {os.path.basename(file_path)}: {e}")

                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {success_count} —Ñ–∞–π–ª–æ–≤")
                print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count} —Ñ–∞–π–ª–æ–≤")

                return success_count, error_count

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞ {zip_file}: {e}")
            return 0, 0

    def unpack_and_organize_archives(self):
        """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤—ã —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Windows"""
        print("üì¶ –†–ê–°–ü–ê–ö–û–í–ö–ê –ê–†–•–ò–í–û–í (Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è)")
        print("=" * 60)

        zip_files = list(Path(self.base_path).rglob('*.zip'))
        total_stats = {'success': 0, 'errors': 0}

        for zip_file in zip_files:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –º–µ—Å—è—Ü
                if '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞' in zip_file.name.lower():
                    obj_type = 'cs_18_001'  # –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
                    obj_name = 'construction_sites'
                else:
                    obj_type = 'ncb_00_022'  # –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
                    obj_name = 'non_compliant_buildings'

                if '–∏—é–ª—å' in zip_file.name.lower():
                    month = 'july'
                else:
                    month = 'august'

                # –ü—É—Ç—å –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
                target_dir = os.path.join(self.processed_path, obj_type, month, 'img')

                print(f"\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {zip_file.name}")
                print(f"   üè∑Ô∏è  –¢–∏–ø: {obj_name}")
                print(f"   üìÖ –ú–µ—Å—è—Ü: {month}")
                print(f"   üìÇ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: {target_dir}")

                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
                success, errors = self.safe_extract_zip(zip_file, target_dir)
                total_stats['success'] += success
                total_stats['errors'] += errors

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞ {zip_file.name}: {e}")

        print(f"\nüìä –ò–¢–û–ì–ò –†–ê–°–ü–ê–ö–û–í–ö–ò:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {total_stats['success']} —Ñ–∞–π–ª–æ–≤")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_stats['errors']} —Ñ–∞–π–ª–æ–≤")

    def process_json_metadata_simple(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è Windows"""
        print("\nüîó –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–¢–ê–î–ê–ù–ù–´–•")
        print("=" * 50)

        json_files = list(Path(self.base_path).rglob('*.json'))
        all_metadata = []

        for json_file in json_files:
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –º–µ—Å—è—Ü
                if '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞' in json_file.name.lower():
                    obj_type = 'cs_18_001'
                    obj_name = 'construction_sites'
                else:
                    obj_type = 'ncb_00_022'
                    obj_name = 'non_compliant_buildings'

                if '–∏—é–ª—å' in json_file.name.lower():
                    month = 'july'
                else:
                    month = 'august'

                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {json_file.name}")

                if 'results' in data and isinstance(data['results'], list):
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
                    sample_size = min(1000, len(data['results']))

                    for i, item in enumerate(tqdm(data['results'][:sample_size], desc="–ó–∞–ø–∏—Å–∏")):
                        photo_id = item.get('id', 'unknown')

                        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                        metadata_record = {
                            'photo_id': photo_id,
                            'object_type': obj_type,
                            'month': month,
                            'filename': f"{photo_id}.jpg",
                            'expected_path': os.path.join(self.processed_path, obj_type, month, 'img',
                                                          f"{photo_id}.jpg"),
                            'has_image': os.path.exists(
                                os.path.join(self.processed_path, obj_type, month, 'img', f"{photo_id}.jpg")),
                            'source_json': Path(json_file).name
                        }

                        all_metadata.append(metadata_record)

                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {sample_size} –∑–∞–ø–∏—Å–µ–π")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {json_file.name}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_df = pd.DataFrame(all_metadata)
        metadata_path = os.path.join(self.processed_path, 'metadata.csv')
        metadata_df.to_csv(metadata_path, index=False, encoding='utf-8')

        print(f"üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metadata_path}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_records = len(metadata_df)
        with_images = metadata_df['has_image'].sum()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {with_images}/{total_records} –∑–∞–ø–∏—Å–µ–π –∏–º–µ—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        return metadata_df


class SimpleDatabaseManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(db_path)

    def create_simple_schema(self):
        """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÉÔ∏è  –°–û–ó–î–ê–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–û–ô –°–•–ï–ú–´ –ë–ê–ó–´")
        print("=" * 50)

        simple_schema = [
            '''CREATE TABLE IF NOT EXISTS photos_enhanced (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                photo_id TEXT,
                object_type TEXT,
                month TEXT,
                file_path TEXT,
                has_image BOOLEAN,
                latitude REAL,
                longitude REAL,
                processed BOOLEAN DEFAULT FALSE,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',

            '''CREATE INDEX IF NOT EXISTS idx_photo_id ON photos_enhanced(photo_id)''',
            '''CREATE INDEX IF NOT EXISTS idx_object_type ON photos_enhanced(object_type)''',
            '''CREATE INDEX IF NOT EXISTS idx_has_image ON photos_enhanced(has_image)'''
        ]

        for sql in simple_schema:
            try:
                self.conn.execute(sql)
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞/–∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω—ã")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        self.conn.commit()

    def import_to_simple_db(self, metadata_df):
        """–ò–º–ø–æ—Ä—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüì• –ò–ú–ü–û–†–¢ –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
        print("=" * 50)

        imported = 0
        for _, row in tqdm(metadata_df.iterrows(), total=len(metadata_df), desc="–ò–º–ø–æ—Ä—Ç"):
            try:
                self.conn.execute('''
                    INSERT OR IGNORE INTO photos_enhanced 
                    (photo_id, object_type, month, file_path, has_image)
                    VALUES (?, ?, ?, ?, ?)
                ''', (row['photo_id'], row['object_type'], row['month'],
                      row['expected_path'], row['has_image']))
                imported += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {row['photo_id']}: {e}")

        self.conn.commit()
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported} –∑–∞–ø–∏—Å–µ–π")

    def get_database_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 50)

        queries = [
            ("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", "SELECT COUNT(*) FROM photos_enhanced"),
            ("–ó–∞–ø–∏—Å–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", "SELECT COUNT(*) FROM photos_enhanced WHERE has_image = 1"),
            ("–ü–æ —Ç–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–æ–≤", "SELECT object_type, COUNT(*) FROM photos_enhanced GROUP BY object_type"),
            ("–ü–æ –º–µ—Å—è—Ü–∞–º", "SELECT month, COUNT(*) FROM photos_enhanced GROUP BY month")
        ]

        for name, query in queries:
            result = self.conn.execute(query).fetchone()[0]
            print(f"   {name}: {result}")


def check_system_limits():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô WINDOWS")
    print("=" * 50)

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—É—Ç–∏ –≤ Windows
    max_path = 260
    print(f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—É—Ç–∏ Windows: {max_path} —Å–∏–º–≤–æ–ª–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
    base_path = r"C:\PythonProjects\hahaton_vswm_obji_tresh\–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\–í—ã–≥—Ä—É–∑–∫–∞"
    print(f"üìÅ –î–ª–∏–Ω–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏: {len(base_path)} —Å–∏–º–≤–æ–ª–æ–≤")

    if len(base_path) > 100:
        print("‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Windows"""
    base_path = r"C:\PythonProjects\hahaton_vswm_obji_tresh\–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\–í—ã–≥—Ä—É–∑–∫–∞"

    print("üöÄ WINDOWS-–°–û–í–ú–ï–°–¢–ò–ú–ê–Ø –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    check_system_limits()

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
        organizer = WindowsDataOrganizer(base_path)

        # 1. –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤—ã
        organizer.unpack_and_organize_archives()

        # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_df = organizer.process_json_metadata_simple()

        # 3. –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        db_manager = SimpleDatabaseManager(organizer.db_path)
        db_manager.create_simple_schema()
        db_manager.import_to_simple_db(metadata_df)
        db_manager.get_database_stats()

        print("\nüéâ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –û–†–ì–ê–ù–ò–ó–û–í–ê–ù–´!")
        print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Windows")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("\nüí° –°–û–í–ï–¢: –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ:")
        print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Linux-—Å–µ—Ä–≤–µ—Ä–∞")
        print("   - –í–∫–ª—é—á–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –≤ Windows (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)")
        print("   - –†–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–æ—Ä–Ω–µ –¥–∏—Å–∫–∞ (C:\\data)")


if __name__ == "__main__":
    main()