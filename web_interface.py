# web_interface_fixed.py
import os
import torch
from PIL import Image
import io
import numpy as np
import cv2
from flask import Flask, request, jsonify, render_template_string

app = Flask(__name__)

# –ü—Ä–æ—Å—Ç–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>GeoLocation AI</title>
    <meta charset="UTF-8">
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 30px;
            border-radius: 15px;
            margin: 20px 0;
        }
        .upload-container { 
            border: 2px dashed rgba(255, 255, 255, 0.3); 
            padding: 40px; 
            text-align: center; 
            margin: 20px 0; 
            border-radius: 10px;
        }
        .result { 
            background: rgba(255, 255, 255, 0.2); 
            padding: 20px; 
            margin: 20px 0; 
            border-radius: 10px;
            display: none;
        }
        button { 
            background: #4CAF50; 
            color: white; 
            padding: 12px 30px; 
            border: none; 
            border-radius: 25px; 
            cursor: pointer; 
            font-size: 16px;
            transition: all 0.3s;
        }
        button:hover { 
            background: #45a049; 
            transform: translateY(-2px);
        }
        input[type="file"] {
            padding: 10px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 5px;
            color: white;
        }
        h1 { text-align: center; margin-bottom: 30px; }
        .coordinate { 
            font-family: 'Courier New', monospace; 
            background: rgba(0, 0, 0, 0.3); 
            padding: 10px; 
            border-radius: 5px; 
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é</h1>

        <div class="upload-container">
            <h3>üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</h3>
            <form id="uploadForm" enctype="multipart/form-data">
                <input type="file" name="image" accept="image/*" required>
                <br><br>
                <button type="submit">üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</button>
            </form>
        </div>

        <div id="result" class="result">
            <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>
            <div class="coordinate"><strong>–®–∏—Ä–æ—Ç–∞:</strong> <span id="latitude">-</span></div>
            <div class="coordinate"><strong>–î–æ–ª–≥–æ—Ç–∞:</strong> <span id="longitude">-</span></div>
            <p><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> <span id="error">-</span></p>
            <div id="mapLink" style="margin-top: 15px;"></div>
        </div>

        <div style="text-align: center; margin-top: 30px; opacity: 0.8;">
            <small>AI –º–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏</small>
        </div>
    </div>

    <script>
        document.getElementById('uploadForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const fileInput = document.querySelector('input[type="file"]');
            const resultDiv = document.getElementById('result');
            const submitBtn = this.querySelector('button');

            if (!fileInput.files[0]) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            submitBtn.textContent = '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...';
            submitBtn.disabled = true;

            const formData = new FormData();
            formData.append('image', fileInput.files[0]);

            try {
                const response = await fetch('/predict', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.error) {
                    alert('–û—à–∏–±–∫–∞: ' + result.error);
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    document.getElementById('latitude').textContent = result.latitude.toFixed(6);
                    document.getElementById('longitude').textContent = result.longitude.toFixed(6);
                    document.getElementById('error').textContent = result.error_estimate;

                    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
                    const mapUrl = `https://yandex.ru/maps/?pt=${result.longitude},${result.latitude}&z=15&l=map`;
                    document.getElementById('mapLink').innerHTML = 
                        `<a href="${mapUrl}" target="_blank" style="color: #4CAF50;">üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>`;

                    resultDiv.style.display = 'block';
                }
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error);
            } finally {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                submitBtn.textContent = 'üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã';
                submitBtn.disabled = false;
            }
        });
    </script>
</body>
</html>
'''


class SimpleGeoCNN(torch.nn.Module):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""

    def __init__(self):
        super().__init__()
        self.features = torch.nn.Sequential(
            torch.nn.Conv2d(3, 32, 3, padding=1), torch.nn.ReLU(),
            torch.nn.MaxPool2d(2),
            torch.nn.Conv2d(32, 64, 3, padding=1), torch.nn.ReLU(),
            torch.nn.MaxPool2d(2),
            torch.nn.Conv2d(64, 128, 3, padding=1), torch.nn.ReLU(),
            torch.nn.AdaptiveAvgPool2d((7, 7))
        )
        self.regressor = torch.nn.Sequential(
            torch.nn.Flatten(),
            torch.nn.Linear(128 * 7 * 7, 512), torch.nn.ReLU(),
            torch.nn.Linear(512, 256), torch.nn.ReLU(),
            torch.nn.Linear(256, 2)
        )

    def forward(self, x):
        return self.regressor(self.features(x))


def safe_load_model():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if not os.path.exists('final_geo_model.pth'):
            print("‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None, None

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Å–æ–≤
        checkpoint = torch.load('final_geo_model.pth', map_location='cpu', weights_only=False)

        model = SimpleGeoCNN()

        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ PyTorch
        if 'model_state_dict' in checkpoint:
            model.load_state_dict(checkpoint['model_state_dict'])
        else:
            # –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
            model.load_state_dict(checkpoint)

        model.eval()
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return model, checkpoint

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None, None


# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model, scalers = safe_load_model()


@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)


@app.route('/predict', methods=['POST'])
def predict():
    if model is None:
        return jsonify({'error': '–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª final_geo_model.pth'})

    try:
        if 'image' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω'})

        file = request.files['image']
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.filename.lower().endswith(('.jpg', '.jpeg', '.png')):
            return jsonify({'error': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPG, JPEG –∏ PNG —Ñ–∞–π–ª—ã'})

        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = file.read()
        if len(image_data) == 0:
            return jsonify({'error': '–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª'})

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(image_data)).convert('RGB')

        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        image = np.array(image)
        original_height, original_width = image.shape[:2]
        image = cv2.resize(image, (224, 224))
        image = image.astype(np.float32) / 255.0
        image_tensor = torch.from_numpy(image).permute(2, 0, 1).float().unsqueeze(0)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        with torch.no_grad():
            prediction = model(image_tensor).numpy()[0]

        # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–ú–æ—Å–∫–≤–∞)
        if scalers and 'scaler_lat_mean' in scalers:
            lat_mean = scalers['scaler_lat_mean']
            lat_scale = scalers['scaler_lat_scale']
            lon_mean = scalers['scaler_lon_mean']
            lon_scale = scalers['scaler_lon_scale']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
            lat_mean = lat_mean[0] if hasattr(lat_mean, '__len__') else lat_mean
            lat_scale = lat_scale[0] if hasattr(lat_scale, '__len__') else lat_scale
            lon_mean = lon_mean[0] if hasattr(lon_mean, '__len__') else lon_mean
            lon_scale = lon_scale[0] if hasattr(lon_scale, '__len__') else lon_scale

            lat = lat_mean + prediction[0] * lat_scale
            lon = lon_mean + prediction[1] * lon_scale
        else:
            # Fallback: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ú–æ—Å–∫–≤—ã
            lat = 55.7 + prediction[0] * 0.3  # ~55.4-56.0
            lon = 37.6 + prediction[1] * 0.3  # ~37.3-37.9

        return jsonify({
            'latitude': float(lat),
            'longitude': float(lon),
            'error_estimate': '12 –∫–º (—Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å)',
            'image_size': f'{original_width}x{original_height}',
            'message': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!'
        })

    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'})


@app.route('/health')
def health_check():
    return jsonify({
        'status': 'healthy',
        'model_loaded': model is not None,
        'service': 'GeoLocation AI'
    })


@app.route('/demo')
def demo_page():
    """–î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º"""
    demo_html = '''
    <h1>üéØ –î–µ–º–æ GeoLocation AI</h1>
    <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ –ú–æ—Å–∫–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
    <p><small>–ü—Ä–∏–º–µ—Ä—ã: —É–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω—ã, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø–∞–Ω–æ—Ä–∞–º—ã</small></p>
    <a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ</a>
    '''
    return render_template_string(demo_html)


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ GeoLocation AI...")
    print("üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
    print("üìä –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:", model is not None)
    print("üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    app.run(host='0.0.0.0', port=5000, debug=True)